#!/usr/bin/env python
import psutil
import time
import json
import argparse

parser = argparse.ArgumentParser(description='Greetings')
parser.add_argument(
    'data_type',
    type=str,
    nargs='?',
    const=1,
    default='txt',
    help='Output file format: txt or json. Default - txt'
)
parser.add_argument(
    'interval',
    type=int,
    nargs='?',
    const=1,
    default=5,
    help='Time interval. Default - 5 mins'
)
args = parser.parse_args()


class data_collect:

    def cpuload(self):  # overall cpu usage
        cpu = str(psutil.cpu_percent())
        return cpu

    def v_memory(self):  # overall virtual memory usage
        vmem = str(psutil.virtual_memory().percent)
        return vmem

    def d_usage(self):  # overall memory usage
        duse = str(psutil.disk_usage('/').percent)
        return duse

    def io_inf(self):  # io information
        ioi = str(psutil.disk_io_counters().write_time)
        return ioi

    def n_inf(self):  # network information
        n_inf = str(psutil.net_io_counters().packets_sent)
        return n_inf


def make_out():
    data_print = data_collect()
    i = 0
    if args.data_type == 'txt':
        while True:
            i += 1
            s = "SNAPSHOT " + str(i) + ": " + "TIME STAMP: " + str(time.ctime()) + \
                " CPU:" + data_print.cpuload() + "%" + " MEMORY: " + \
                data_print.d_usage() + "% VIRTUAL_MEMORY: " + data_print.v_memory() + \
                "% IO: " + data_print.io_inf() + " Network: " + data_print.n_inf() + '\n'
            output_file = open('output.txt', 'a')
            output_file.write(s)
            output_file.close()
            time.sleep(args.interval * 60)
    elif args.data_type == 'json':
        while True:
            i += 1
            out_data = {
                'SNAPSHOT': str(i), 'Time STAMP': str(time.ctime()),
                'CPU': data_print.cpuload(),
                'MEMORY': data_print.d_usage(),
                'VIRTUAL_MEMORY': data_print.v_memory(),
                'IO_info': data_print.io_inf(),
                'NET_info': data_print.n_inf()
            }
            with open("output.json", "a") as file:
                json.dump(out_data, file, indent=3)
                json.write('\n')
            time.sleep(args.interval * 60)


make_out()
